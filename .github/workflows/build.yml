name: Build and Release with Semantic Versioning

on:
  push:
    branches:
      - master  # Set to your default development branch

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install jq
      run: choco install jq

    - name: Install semver
      run: npm install semver

    - name: Calculate new version and create tag
      id: calculate_new_version
      run: |
        echo "Fetching tags..."
        git fetch --tags
        $TAG_PREFIX="v"
        $LAST_TAG=$(git tag -l "${TAG_PREFIX}*" | Sort-Object -Version | Select-Object -Last 1)
        $LAST_VERSION=$LAST_TAG.TrimStart($TAG_PREFIX)
        if ($LAST_VERSION -eq "") { $LAST_VERSION="0.0.0" }
        echo "Last version: $LAST_VERSION"
        $NEW_VERSION=[System.Environment]::ExpandEnvironmentVariables("$(node -pe "
        const semver = require('semver');
        const lastVersion = '${LAST_VERSION}';
        const commitMessages = \`$(git log ${LAST_TAG}..HEAD --pretty=format:%s)\`;
        let increment = 'patch'; // default to patch
        if (/BREAKING CHANGE|feat!/.test(commitMessages)) increment = 'major';
        else if (/feat|feature/.test(commitMessages)) increment = 'minor';
        semver.inc(lastVersion, increment)
        ")")
        echo "New version: $NEW_VERSION"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag $NEW_VERSION
        echo "NEW_VERSION=$NEW_VERSION" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: powershell

    - name: Update package.json version
      run: |
        $ver = "${{ env.NEW_VERSION }}"
        (Get-Content package.json -Raw) | ConvertFrom-Json | ForEach-Object { $_.version = $ver } | ConvertTo-Json | Set-Content -Path package.json -Encoding UTF8
        git add package.json
        git commit -m "Update package.json to version $ver"
      shell: powershell

    - name: Build and package
      run: npm run dist

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: Release ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Diabolical Launcher Setup.exe
        asset_name: DiabolicalLauncherSetup.exe
        asset_content_type: application/octet-stream
