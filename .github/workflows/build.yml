name: Build and Release with Auto Versioning

on:
  push:
    branches:
      - master
      - dev

jobs:
  build_and_release:
    runs-on: windows-latest
    permissions:              
      contents: write
      attestations: write
      id-token: write

    steps:
      - name: üõ† Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: üì¶ Install dependencies (Electron Project)
        run: npm install

      - name: üî¢ Calculate new version and create tag
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
        id: calculate_new_version
        run: |
          echo "Fetching tags..."
          git fetch --tags
          # Determine if this is a dev or production build
          if [[ "$GITHUB_REF" == "refs/heads/dev" ]]; then
            TAG_PREFIX="dev-"
            LAST_TAG=$(git tag -l "dev-*" | sort -V | tail -n1)
            if [[ -z "$LAST_TAG" ]]; then LAST_TAG="dev-0.0.0"; fi
          else
            TAG_PREFIX=""
            LAST_TAG=$(git tag -l "[0-9]*" | sort -V | tail -n1)
            if [[ -z "$LAST_TAG" ]]; then LAST_TAG="0.0.0"; fi
          fi
          echo "Last version: $LAST_TAG"
          # Get commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          # Extract version numbers
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#*-}"
          # Determine version increment
          if echo "$COMMIT_MESSAGE" | grep -iq "major"; then
            echo "Incrementing major version"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MESSAGE" | grep -iq "minor"; then
            echo "Incrementing minor version"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            echo "Incrementing patch version"
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          # Create new tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "$TAG_PREFIX$NEW_VERSION"
          # Set environment variable for the new version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: üìù Update package.json version
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
        run: |
          npm version ${{ env.NEW_VERSION }} --no-git-tag-version
          git add package.json
          git commit -m "Update package.json to version ${{ env.NEW_VERSION }}"

      - name: üî® Build and Package Electron App
        if: github.ref == 'refs/heads/master'
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: üî® Build and Package Electron App (Dev)
        if: github.ref == 'refs/heads/dev'
        run: npm run build:dev
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: üìÑ Create latest.yml
        run: |
          echo "version: ${{ env.NEW_VERSION }}" > latest.yml
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}

      - name: üè∑Ô∏è Rename setup file to use hyphens
        run: |
          mv "dist/Diabolical Launcher Setup.exe" "dist/Diabolical-Launcher-Setup.exe"
      
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/Diabolical-Launcher-Setup.exe
            dist/latest.yml
            dist/Diabolical Launcher Setup.exe.blockmap

      - name: üîí Generate provenance attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: dist/Diabolical-Launcher-Setup.exe
          subject-name: Diabolical-Launcher-Setup.exe

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: "${{ env.NEW_VERSION }} - ${{ github.ref == 'refs/heads/dev' && 'Development' || 'Production' }} Build"
          files: |
            dist/Diabolical-Launcher-Setup.exe
            dist/latest.yml
            dist/Diabolical Launcher Setup.exe.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
