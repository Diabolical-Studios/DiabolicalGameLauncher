name: Build and Release with Semantic Versioning

on:
  push:
    branches:
      - master  # Set to your default development branch

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install jq
      run: choco install jq

    - name: Calculate new version and create tag
      id: calculate_new_version
      run: |
        echo "Fetching tags..."
        git fetch --tags
        TAG_PREFIX="v"
        LAST_TAG=$(git tag -l "${TAG_PREFIX}*" | sort -V | tail -n1)
        LAST_VERSION=${LAST_TAG#$TAG_PREFIX}
        NEW_VERSION=$(node -e "const lastVersion = '${LAST_VERSION}'; const [major, minor, patch] = lastVersion.split('.').map(x => parseInt(x, 10)); const commitMessages = $(git log ${LAST_TAG}..HEAD --pretty=format:%s); let newVersion = ''; if (/BREAKING CHANGE|feat!/.test(commitMessages)) { newVersion = `${major + 1}.0.0`; } else if (/feat|feature/.test(commitMessages)) { newVersion = `${major}.${minor + 1}.0`; } else { newVersion = `${major}.${minor}.${patch + 1}`; } console.log(newVersion);")
        echo "New version: $NEW_VERSION"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "$NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Update package.json version
      run: |
        jq --arg ver "${{ env.NEW_VERSION }}" '.version = $ver' package.json > package.json.tmp
        mv package.json.tmp package.json
        git add package.json
        git commit -m "Update package.json to version ${{ env.NEW_VERSION }}"
        git push --follow-tags

    - name: Build and package
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: Release ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Diabolical Launcher Setup.exe
        asset_name: DiabolicalLauncherSetup.exe
        asset_content_type: application/octet-stream
