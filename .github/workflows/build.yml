name: Build and Release with Auto Versioning

on:
  push:
    branches:
      - master  # Set to your default development branch

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install jq
      run: choco install jq

    - name: Calculate new version and create tag
      run: |
        echo "Fetching tags..."
        git fetch --tags
        TAG_PREFIX="v"
        LAST_TAG=$(git tag -l "${TAG_PREFIX}*" | sort -V | tail -n1)
        LAST_VERSION=${LAST_TAG#$TAG_PREFIX}
        if [[ $LAST_VERSION == "" ]]; then LAST_VERSION=0; fi
        NEW_VERSION=$((LAST_VERSION + 1))
        NEW_SEMVER_VERSION="$NEW_VERSION.0.0"
        echo "New version: $NEW_SEMVER_VERSION"
        echo "Creating new tag and updating version..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "$TAG_PREFIX$NEW_VERSION"
        echo "VERSION=$NEW_SEMVER_VERSION" >> $GITHUB_ENV
    
    - name: Update package.json version
      run: |
        jq --arg ver "$VERSION" '.version = $ver' package.json | Set-Content -Path package.json -Encoding UTF8
        git add package.json
        git commit -m "Update package.json to version $VERSION"   
    
    - name: Build and package
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ steps.calculate_new_version.outputs.new_version }}
        release_name: Release ${{ steps.calculate_new_version.outputs.new_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Diabolical Launcher Setup.exe
        asset_name: DiabolicalLauncherSetup.exe
        asset_content_type: application/octet-stream
